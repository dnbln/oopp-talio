plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco-report-aggregation'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    group = 'oopp'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '19'

    jacoco {
        toolVersion = "0.8.8"
    }

    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
            classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
        }
    }

    dependencies {
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
        testImplementation 'org.mockito:mockito-core:5.1.1'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'

    }
}

// configure the aggregation task
tasks.register('AggregateJacocoReport', JacocoReport) {
    // set the output directory for the aggregated report
    reports {
        xml.required = true
        csv.required = false
    }

    // select the project dependencies with coverage data to aggregate
    dependsOn(subprojects.check)
    classDirectories.from = files(subprojects.sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
}


checkstyle {
    toolVersion "10.8.0"
    ignoreFailures = false
    maxErrors = 3
    maxWarnings = 5
}

checkstyleTest {
    source = fileTree('.') {
        includes = ['**/test/**']
        excludes = ['.*/**', 'gradle*', '*build/**', '**/build/**', 'docs/**', '*.iml', '*.log', '**/*.jar']
    }
}
checkstyleMain {
    source = fileTree('.') {
        excludes = ['.*/**', '**/test/**', 'gradle*', 'build/**', '**/build/**', 'docs/**', '*.iml', '*.log', '**/*.jar']
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}